#!/bin/bash

# 
# dasu - Package up software projects for public release.
# 
# CHANGE LOG:
# 
# v0.1   2015-02-17 - Morgan Aldridge <morgant@makkintosshu.com>
#                     Initial version, based on bash_stub.
# 
# LICENSE:
# 
# Copyright (c) 2015, Morgan Aldridge. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

# info
tool=$(basename "$0")
version='0.1'
copyright='(c) 2015 Morgan T. Aldridge'

# global variables
verbose=false
formats=()
exclusions=()
release_version=''
project_path=''

# print usage instructions (help)
function usage() {
	echo "Usage: $tool [options] <project> <version>"
	echo '  -f, --format    output file format (tgz, tbz, zip)'
	echo '  -h, --help      print these usage instructions'
	echo '  -v, --verbose   verbose output'
	echo '  -V, --version   print the version'
	echo
	echo 'Parameters:'
	echo '  project         project path to be packaged for release'
	echo '  version         version string appended to file name'
}

# print version info
function version() {
	echo "$tool v$version $copyright"
}

# package up a project
function package_project() {
	local success=true
	local project_path="$1"
	local release="$2"
	
	local path="$(dirname "$project_path")"
	local project="$(basename "$project_path")"
	
	if $verbose; then echo -n "Determining files in '$project' to exclude... "; fi
	
	# is this a git repository
	local count="$(find "$project_path" -name ".git" | wc -l)"
	if (( count > 0 )); then
		# exclude '.git' directories
		exclusions+=(".git")
	fi
	
	# is this a subversion repository
	count="$(find "$project_path" -name ".svn" | wc -l)"
	if (( count > 0 )); then
		# exclude '.svn' directories
		exclusions+=(".svn")
	fi
	
	if $verbose; then echo "Done."; fi
	
	# build & run the rsync command (exclusions and all) to build the intermediary directory
	if $verbose; then echo -n "Cloning '$project' to â€™${project}-${release}'"; fi
	local rsync_cmd=("rsync" "-vaE")
	if (( ${#exclusions[@]} > 0 )); then
		if $verbose; then echo -n " (excluding"; fi
		local exclusion=''
		for exclusion in "${exclusions[@]}"; do
			if $verbose; then echo -n " '$exclusion'"; fi
			rsync_cmd+=("--exclude=$exclusion")
		done
		if $verbose; then echo -n ")... "; fi
	fi
	rsync_cmd+=("${path}/${project}/")
	rsync_cmd+=("./${project}-${release}/")
	echo "${rsync_cmd[@]}"
	if $verbose; then echo "Done."; fi
	
	# for each archive format, build the archive
	local format=''
	for format in "${formats[@]}"; do
		if $verbose; then echo -n "Packaging '${project}-${release}' into '${project}-${release}"; fi
		
		# determine the command & compression to use
		local package_cmd=()
		case "$format" in
			"tgz")
				if $verbose; then echo -n ".tar.gz"; fi
				package_cmd+=("tar" "czf" "./${project}-${release}.tar.gz" "./${project}-${release}")
				;;
			"tbz")
				if $verbose; then echo -n ".tar.bz2"; fi
				package_cmd+=("tar" "cjf" "./${project}-${release}.tar.bz2" "./${project}-${release}")
				;;
			"zip")
				if $verbose; then echo -n ".zip"; fi
				package_cmd+=("zip" "-r" "./${project}-${release}.zip" "./${project}-${release}")
				;;
		esac
		if $verbose; then echo -n "'... "; fi
		
		# run the command
		echo "${package_cmd[@]}"
		if $verbose; then echo "Done."; fi
	done
	
	# remove the intermediary directory
	if $verbose; then echo -n " Removing '${project}-${release}'... "; fi
	local rm_cmd=("rm" "-r" "./${project}-${release}")
	echo "${rm_cmd[@]}"
	if $verbose; then echo "Done."; fi
	
	$success
}

# see if any arguments were passed in
if [ $# -gt 0 ]; then
	# if so, step through them all and pre-process them (we do this so we can 
	# support multiple options specified together, e.g.: -abc vs. -a -b -c),
	# GNU-style long options with alternate style values, and for easier
	# actual handling
	argv=()
	while [ $# -gt 0 ]; do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${1:0:1}" = "-" ]; then
			# is it a GNU-style long option (e.g. starts with a double-dash)?
			if [ "${1:0:2}" = "--" ]; then
				# push the option (everything before an equals) onto argv
				argv=("${argv[@]}" "${1%%=*}")
				
				# is it the alternate "--long-opt=value" format? if so, make it
				# "--long-opt value" format buy pushing the value (everything after the
				# equals) on as a separate argument
				case "$1" in *=*)
					argv=("${argv[@]}" "${1##*=}") ;;
				esac
			# otherwise, is it multiple single options specified together?
			elif [ ${#1} -gt 2 ]; then
				tmp="$1"
				# push each onto argv as single options
				for (( i=1; i < ${#tmp}; i++ )); do
					argv=("${argv[@]}" "-${tmp:$i:1}")
				done
			# otherwise, it must be a single option so just push it onto argv
			else
				argv=("${argv[@]}" "$1")
			fi
			shift
		# arguments just get pushed onto argv in order too
		else
			argv=("${argv[@]}" "$1")
			shift
		fi
	done
	argc=${#argv[@]}
		
	# now that we've pre-processed the options, go through them all for real
	for (( i=0; i<$argc; i++ )); do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${argv[$i]:0:1}" = "-" ]; then
			case "${argv[$i]}" in
				# see if the user specified an output archive format
				"-f" | "--format")
					(( i++ ))
					if [[ "${argv[$i]}" =~ ^(tgz|tbz|zip)$ ]]; then
						formats+=("${argv[$i]}")
					else
						echo "$tool: Unknown output format '${argv[$i]}'!"
						exit 1
					fi
					;;
				# see if the user intended us to run in verbose mode
				"-v" | "--verbose")
					verbose=true
					;;
				# see if the user requested help
				"-h" | "--help")
					usage
					exit
					;;
				# see if the user requested the version
				"-V" | "--version")
					version
					exit
					;;
				# handle other options
			
				# unknown option
				*)
					echo "$tool: Unknown option '${argv[$i]}'!"
					exit 1
					;;
			esac
		# handle arguments
		else
			# grab the version & project parameter arguments
			if (( argc - i == 2 )); then
				project_path="${argv[$i]}"
				(( i++ ))
				release_version="${argv[$i]}"
			else
				echo "$tool: Invalid number of arguments (two expected)!"
				exit 1
			fi
		fi
	done
else
	echo "No options or arguments were specified!"$'\n'
	usage
	exit 1
fi

package_project "$project_path" "$release_version"

